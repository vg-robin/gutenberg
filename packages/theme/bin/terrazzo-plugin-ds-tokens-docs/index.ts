/**
 * External dependencies
 */
import { FORMAT_ID } from '@terrazzo/plugin-css';
import type { Plugin } from '@terrazzo/parser';

function isPrivateToken( token: string ) {
	return /-private-/i.test( token );
}

function titleCase( str: string ) {
	return str[ 0 ].toUpperCase() + str.slice( 1 );
}

type TokensMap = Record< string, Record< string, string > >;

export default function pluginDsTokenDocs( {
	filename = 'design-tokens.md',
} = {} ): Plugin {
	return {
		name: '@terrazzo/terrazzo-plugin-ds-tokens-docs',
		async build( { getTransforms, outputFile } ) {
			if ( ! filename ) {
				return;
			}

			const primitiveTokens: TokensMap = {};
			const semanticTokens: TokensMap = {};
			// Re-use transformed tokens from the CSS plugin
			for ( const token of getTransforms( {
				format: FORMAT_ID,
				id: '*',
				mode: '.',
			} ) ) {
				if ( token.localID === undefined ) {
					console.warn(
						'Unexpected â€” Missing local ID when building token list for eslint plugin'
					);
					continue;
				}

				// Use the tokens filename (without .json) as the group name
				const group =
					token.token.source.loc
						?.split( '/' )
						.at( -1 )
						?.split( '.json' )[ 0 ] ?? 'Miscellaneous';

				// Organize tokens in semantic/private, and group by category.
				const tokensObject = isPrivateToken( token.localID )
					? primitiveTokens
					: semanticTokens;
				tokensObject[ group ] ??= {};
				tokensObject[ group ][ token.localID ] =
					token.token.$description ?? 'N/A';
			}

			function tokensToMdTable(
				tokens: TokensMap,
				isPrivate: boolean = false
			) {
				return Object.entries( tokens )
					.map( ( [ group, tokensInGroup ] ) => [
						`### ${ titleCase( group ) }${
							isPrivate ? ' (private)' : ''
						}`,
						'',
						'| Variable name | Description |',
						'|---|---|',
						...Object.entries( tokensInGroup ).map(
							( [ name, description ] ) =>
								`| \`${ name }\` | ${ description } |`
						),
						'',
					] )
					.flat( 2 );
			}

			outputFile(
				filename,
				[
					'<!--',
					'This file is generated by @terrazzo/terrazzo-plugin-ds-tokens-docs.',
					'Do not edit directly.',
					'-->',
					'',
					'# DS Tokens reference',
					'',
					'## Semantic tokens',
					'',
					...tokensToMdTable( semanticTokens ),
					'',
					'## Primitive tokens',
					'',
					'**ðŸš¨ Note: These tokens are only private implementation details of the Theme, and should never be referenced / consumed directly in the code.**',
					'',
					...tokensToMdTable( primitiveTokens, true ),
					'', // final empty line
				].join( '\n' )
			);
		},
	};
}
